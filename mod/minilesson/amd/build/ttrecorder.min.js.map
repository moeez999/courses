{"version":3,"file":"ttrecorder.min.js","sources":["../src/ttrecorder.js"],"sourcesContent":["define(['jquery', 'core/log','core/notification', 'mod_minilesson/ttaudiohelper','mod_minilesson/ttbrowserrec' ],\n    function ($, log, notification, audioHelper, browserRec) {\n    \"use strict\"; // jshint ;_;\n    /*\n    *  The TT recorder\n     */\n\n    log.debug('TT Recorder: initialising');\n\n    return {\n        waveHeight: 75,\n        audio: {\n            stream: null,\n            blob: null,\n            dataURI: null,\n            start: null,\n            end: null,\n            isRecording: false,\n            isRecognizing: false,\n            transcript: null\n        },\n        submitting: false,\n        owner: '',\n        controls: {},\n        uniqueid: null,\n        audio_updated: null,\n        maxTime: 15000,\n        passagehash: null,\n        region: null,\n        asrurl: null,\n        lang: null,\n        browserrec: null,\n        usebrowserrec: false,\n        currentTime: 0,\n        stt_guided: false,\n        currentPrompt: false,\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(opts){\n\n            var that = this;\n\n            this.uniqueid=opts['uniqueid'];\n            this.callback=opts['callback'];\n            this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n            this.prepare_html();\n            this.controls.recordercontainer.show();\n            this.register_events();\n\n\n            //callbacks\n            var on_error = function(error) {\n                switch (error.name) {\n                    case 'PermissionDeniedError':\n                    case 'NotAllowedError':\n                        notification.alert(\"Error\",'Please allow access to your microphone!', \"OK\");\n                        break;\n                    case 'DevicesNotFoundError':\n                    case 'NotFoundError':\n                        notification.alert(\"Error\",'No microphone detected!', \"OK\");\n                        break;\n                    default:\n                        //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                        //notification.alert(\"Error\", error.name, \"OK\");\n                        log.debug(\"Error\", error.name);\n                }\n            };\n\n            var on_stopped = function(blob) {\n                clearInterval(that.interval);\n\n                //if ds recc\n                var newaudio = {\n                    blob: blob,\n                    dataURI: URL.createObjectURL(blob),\n                    end: new Date(),\n                    isRecording: false,\n                    length: Math.round((that.audio.end - that.audio.start) / 1000),\n                };\n                that.update_audio(newaudio);\n\n                that.deepSpeech2(that.audio.blob, function(response){\n                    log.debug(response);\n                    that.update_audio('isRecognizing',false);\n                    if(response.data.result===\"success\" && response.data.transcript){\n                        that.gotRecognition(response.data.transcript.trim());\n                    } else {\n                        notification.alert(\"Information\",\"We could not recognize your speech.\", \"OK\");\n                    }\n                });\n\n            };\n\n            //set up events\n            var on_gotstream=  function(stream) {\n\n                var newaudio={stream: stream, isRecording: true};\n                that.update_audio(newaudio);\n                that.currentTime = 0;\n\n                that.interval = setInterval(function() {\n                    if (that.currentTime < that.maxTime) {\n                        that.currentTime += 10;\n                    } else {\n                        that.update_audio('isRecognizing',true);\n                        // vm.isRecognizing = true;\n                        that.audiohelper.stop();\n                    }\n                }, 10);\n\n            };\n\n\n\n            //If browser rec (Chrome Speech Rec) (and ds is optiona)\n            if(browserRec.will_work_ok() && ! this.stt_guided){\n                //Init browserrec\n                log.debug(\"using browser rec\");\n                this.browserrec = browserRec.clone();\n                this.browserrec.init(this.lang,this.waveHeight,this.uniqueid);\n                this.usebrowserrec=true;\n\n                //set up events\n                that.browserrec.onerror = on_error;\n                that.browserrec.onend = function(){\n                        //do something here\n                };\n                that.browserrec.onstart = function(){\n                    //do something here\n                };\n                that.browserrec.onfinalspeechcapture=function(speechtext){\n                    that.gotRecognition(speechtext);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',false);\n                };\n\n            //If DS rec\n            }else {\n                //set up wav for ds rec\n                log.debug(\"using ds rec\");\n                this.audiohelper =  audioHelper.clone();\n                this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                that.audiohelper.onError = on_error;\n                that.audiohelper.onStop = on_stopped;\n                that.audiohelper.onStream = on_gotstream;\n\n            }//end of setting up recorders\n        },\n\n        prepare_html: function(){\n            this.controls.recordercontainer =$('#ttrec_container_' + this.uniqueid);\n            this.controls.recorderbutton = $('#' + this.uniqueid + '_recorderdiv');\n            this.passagehash = this.controls.recorderbutton.data('passagehash');\n            this.region=this.controls.recorderbutton.data('region');\n            this.lang=this.controls.recorderbutton.data('lang');\n            this.asrurl=this.controls.recorderbutton.data('asrurl');\n            this.maxTime=this.controls.recorderbutton.data('maxtime');\n            this.waveHeight=this.controls.recorderbutton.data('waveheight');\n        },\n\n        silence_detected: function(){\n            if(this.audio.isRecording){\n                this.toggleRecording();\n            }\n        },\n\n        update_audio: function(newprops,val){\n            if (typeof newprops === 'string') {\n                log.debug('update_audio:' + newprops + ':' + val);\n                if (this.audio[newprops] !== val) {\n                    this.audio[newprops] = val;\n                    this.audio_updated();\n                }\n            }else{\n                for (var theprop in newprops) {\n                    this.audio[theprop] = newprops[theprop];\n                    log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                }\n                this.audio_updated();\n            }\n        },\n\n        register_events: function(){\n            var that = this;\n            this.controls.recordercontainer.click(function(){\n                that.toggleRecording();\n            });\n\n            this.audio_updated=function() {\n                //pointer\n                if (that.audio.isRecognizing) {\n                    that.show_recorder_pointer('none');\n                } else {\n                    that.show_recorder_pointer('auto');\n                }\n\n                if(that.audio.isRecognizing || that.audio.isRecording ) {\n                    this.controls.recorderbutton.css('background', '#e52');\n                }else{\n                    this.controls.recorderbutton.css('background', 'green');\n                }\n\n                //div content WHEN?\n                that.controls.recorderbutton.html(that.recordBtnContent());\n            };\n\n        },\n\n        show_recorder_pointer: function(show){\n            if(show) {\n                this.controls.recorderbutton.css('pointer-events', 'none');\n            }else{\n                this.controls.recorderbutton.css('pointer-events', 'auto');\n            }\n\n        },\n\n\n        gotRecognition:function(transcript){\n            log.debug('transcript:' + transcript);\n            var message={};\n            message.type='speech';\n            message.capturedspeech = transcript;\n           //POINT\n            this.callback(message);\n        },\n\n        cleanWord: function(word) {\n            return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n        },\n\n        recordBtnContent: function() {\n\n            if(!this.audio.isRecognizing){\n\n                if (this.audio.isRecording) {\n                    return '<i class=\"fa fa-stop\">';\n                } else {\n                    return '<i class=\"fa fa-microphone\">';\n                }\n\n            } else {\n                return '<i class=\"fa fa-spinner fa-spin\">';\n            }\n        },\n        toggleRecording: function() {\n            var that =this;\n\n            //If we are current recording\n            if (this.audio.isRecording) {\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    clearInterval(that.interval);\n                    that.update_audio('isRecording',false);\n                    that.update_audio('isRecognizing',true);\n                    this.browserrec.stop();\n\n                //If using DS rec\n                }else{\n                    this.update_audio('isRecognizing',true);\n                    this.audiohelper.stop();\n                }\n\n             //If we are NOT currently recording\n            } else {\n\n                //If using Browser Rec (chrome speech)\n                if(this.usebrowserrec){\n                    this.update_audio('isRecording',true);\n                    this.browserrec.start();\n                    that.currentTime = 0;\n                    this.interval = setInterval(function() {\n                        if (that.currentTime < that.maxTime) {\n                            that.currentTime += 10;\n                        } else {\n                            that.update_audio('isRecording',false);\n                            that.update_audio('isRecognizing',true);\n                            clearInterval(that.interval);\n                            that.browserrec.stop();\n                        }\n                    }, 10);\n\n                //If using DS Rec\n                }else {\n                    var newaudio = {\n                        stream: null,\n                        blob: null,\n                        dataURI: null,\n                        start: new Date(),\n                        end: null,\n                        isRecording: false,\n                        isRecognizing:false,\n                        transcript: null\n                    };\n                    this.update_audio(newaudio);\n                    this.audiohelper.start();\n                }\n            }\n        },\n\n\n        deepSpeech2: function(blob, callback) {\n            var bodyFormData = new FormData();\n            var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n            bodyFormData.append('audioFile', blob, blobname);\n            bodyFormData.append('scorer', this.passagehash);\n            if(this.stt_guided) {\n                bodyFormData.append('strictmode', 'false');\n            }else{\n                bodyFormData.append('strictmode', 'true');\n            }\n            //prompt is used by whisper and other transcibers down the line\n            if(this.currentPrompt!==false){\n                bodyFormData.append('prompt', this.currentPrompt);\n            }\n            bodyFormData.append('lang', this.lang);\n            bodyFormData.append('wwwroot', M.cfg.wwwroot);\n\n            var oReq = new XMLHttpRequest();\n            oReq.open(\"POST\", this.asrurl, true);\n            oReq.onUploadProgress= function(progressEvent) {};\n            oReq.onload = function(oEvent) {\n                if (oReq.status === 200) {\n                    callback(JSON.parse(oReq.response));\n                } else {\n                    callback({data: {result: \"error\"}});\n                    console.error(oReq.error);\n                }\n            };\n            try {\n                oReq.send(bodyFormData);\n            }catch(err){\n                callback({data: {result: \"error\"}});\n                console.error(err);\n            }\n        },\n\n    };//end of return value\n\n});"],"names":["define","$","log","notification","audioHelper","browserRec","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","transcript","submitting","owner","controls","uniqueid","audio_updated","maxTime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","currentPrompt","clone","extend","this","init","opts","that","callback","prepare_html","recordercontainer","show","register_events","on_error","error","name","alert","will_work_ok","onerror","onend","onstart","onfinalspeechcapture","speechtext","gotRecognition","update_audio","audiohelper","onError","onStop","clearInterval","interval","newaudio","URL","createObjectURL","Date","length","Math","round","deepSpeech2","response","data","result","trim","onStream","setInterval","stop","recorderbutton","silence_detected","toggleRecording","newprops","val","theprop","click","show_recorder_pointer","css","html","recordBtnContent","message","capturedspeech","cleanWord","word","replace","toLowerCase","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","progressEvent","onload","oEvent","status","JSON","parse","console","send","err"],"mappings":"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"}