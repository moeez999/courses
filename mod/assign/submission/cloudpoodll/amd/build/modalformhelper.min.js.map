{"version":3,"file":"modalformhelper.min.js","sources":["../src/modalformhelper.js"],"sourcesContent":["/**\n * Add a modal to manage question adding and editing to the page.\n *\n * @module     assignsubmission_cloudpoodll/modalformhelper\n * @class      modalformhelper\n * @package    mod_poodlltime\n * @copyright  2020 Justin Hunt <poodllsupport@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log','core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, log,Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {int} contextid\n         * @param {Object} callback The function to call after successful deletion (for UI updates)\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var TheForm = function(selector) {\n\n            //this will init on item click (better for lots of items)\n            this.init(selector);\n\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        TheForm.prototype.modal = null;\n\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.init = function(selector) {\n            var triggers = $(selector);\n            var dd=this;\n\n            $('body').on('click',selector,function(e) {\n                //prevent it doing a real click (which will do the non ajax version of a click)\n                e.preventDefault();\n                dd.modaldata={'contextid':  $(this).data('contextid'),\n                    'mediaurl': $(this).data('mediaurl'),\n                    'mediatype': $(this).data('mediatype'),\n                    'transcripturl': $(this).data('transcripturl'),\n                    'lang': $(this).data('lang')\n                };\n\n\n                ModalFactory.create({\n                    type: ModalFactory.types.CANCEL,\n                    title: dd.formtitle,\n                    body: dd.getBody(dd.modaldata)\n                }).then(function (modal) {\n                    // Keep a reference to the modal.\n                    dd.modal = modal;\n                   // dd.modal.setLarge();\n                   // dd.modal.setTitle('bananas');\n\n                    // We want to reset the form every time it is opened.\n                    dd.modal.getRoot().on(ModalEvents.hidden, function() {\n                        dd.modal.setBody(dd.getBody(dd.modaldata));\n                    }.bind(dd));\n\n                    dd.modal.show();\n                    return dd.modal;\n                });\n\n            });//end of on click\n\n        };\n\n\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.getBody = function(modaldata) {\n\n\n            // Get the content of the modal.\n            return Fragment.loadFragment('assignsubmission_cloudpoodll', 'mform', modaldata['contextid'], modaldata);\n\n        };\n\n\n        return /** @alias module:assignsubmission_cloudpoodll/modalformhelper */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {function} callback The callback.\n             * @return {Promise}\n             */\n            init: function(selector) {\n                return new TheForm(selector);\n            }\n        };\n    });"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","TheForm","selector","init","prototype","modal","dd","this","on","e","preventDefault","modaldata","data","create","type","types","CANCEL","title","formtitle","body","getBody","then","getRoot","hidden","setBody","bind","show","loadFragment"],"mappings":";;;;;;;;;AASAA,sDAAO,CAAC,SAAU,WAAW,WAAY,qBAAsB,oBAAqB,gBAAiB,YAAa,aAC9G,SAASC,EAAGC,IAAIC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,OAWxDC,QAAU,SAASC,eAGdC,KAAKD,kBAQdD,QAAQG,UAAUC,MAAQ,KAU1BJ,QAAQG,UAAUD,KAAO,SAASD,UACfT,EAAES,cACbI,GAAGC,KAEPd,EAAE,QAAQe,GAAG,QAAQN,UAAS,SAASO,GAEnCA,EAAEC,iBACFJ,GAAGK,UAAU,WAAelB,EAAEc,MAAMK,KAAK,sBACzBnB,EAAEc,MAAMK,KAAK,sBACZnB,EAAEc,MAAMK,KAAK,2BACTnB,EAAEc,MAAMK,KAAK,sBACtBnB,EAAEc,MAAMK,KAAK,SAIzBhB,aAAaiB,OAAO,CAChBC,KAAMlB,aAAamB,MAAMC,OACzBC,MAAOX,GAAGY,UACVC,KAAMb,GAAGc,QAAQd,GAAGK,aACrBU,MAAK,SAAUhB,cAEdC,GAAGD,MAAQA,MAKXC,GAAGD,MAAMiB,UAAUd,GAAGX,YAAY0B,OAAQ,WACtCjB,GAAGD,MAAMmB,QAAQlB,GAAGc,QAAQd,GAAGK,aACjCc,KAAKnB,KAEPA,GAAGD,MAAMqB,OACFpB,GAAGD,aAatBJ,QAAQG,UAAUgB,QAAU,SAAST,kBAI1Bb,SAAS6B,aAAa,+BAAgC,QAAShB,UAAS,UAAeA,YAKzB,CAWrER,KAAM,SAASD,iBACJ,IAAID,QAAQC"}