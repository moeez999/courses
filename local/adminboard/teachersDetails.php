<?php
ob_start(); // Start output buffering
require_once('../../config.php'); // Moodle config file for database connection
ob_end_clean(); // Clear any output generated by config.php
require_once($CFG->libdir . '/oauthlib.php');

global $DB;

$teachersDetail = []; // To store the final result
$colors = ['#1F3A93', '#2C3E50', '#16A085']; // Array of background colors

// Fetch teachers with role ID 3 (e.g., teacher role)
$teachers = $DB->get_records_sql("SELECT id, firstname FROM {user} WHERE id IN (SELECT DISTINCT(userid) FROM {role_assignments} WHERE roleid = ?)", array(3));


$colorIndex = 0; // Initialize color index to cycle through colors

foreach ($teachers as $teacher) {
    // Query to fetch cohorts where the cohortmainteacher is the teacher's ID
    $cohorts = $DB->get_records('cohort', array('cohortmainteacher' => $teacher->id));

    // If there are no cohorts, skip adding the teacher
    if (empty($cohorts)) {
        continue;
    }

    // Initialize teacher info
    $teacher_info = array(
        'teacher' => [
            'image' => '', // Default to empty, we'll fetch it below
            'name' => $teacher->firstname,
            'backgroundColor' => $colors[$colorIndex] // Assign the background color based on the current index
        ],
        'basicDetail' => [] // Initialize an empty array for basic details
    );

    // Query to get teacher details, including the image
    $teacher_details = $DB->get_record('user', array('id' => $teacher->id));

    // Get the image URL (assuming Moodle stores profile images in file storage)
    if ($teacher_details->picture) {
        // Moodle stores images in file system, so we need to get the URL
        //$teacher_info['teacher']['image'] = $OUTPUT->image_url('user/'.$teacher_details->id, 'core');
        $teacher_info['teacher']['image'] = "./images/Teachers/1.svg"; // Placeholder image
    }

    // Loop through each cohort
    foreach ($cohorts as $cohort) {
        $cohort_id = (int) trim($cohort->id);

        // Fetch cohort details
        $record = $DB->get_record('cohort', ['id' => $cohort_id]);

          // Count the number of members in the cohort
       $cohort_members_count = $DB->count_records('cohort_members', ['cohortid' => $cohort_id]);

        $hour = !empty($record->cohorthours) ? (int)$record->cohorthours : 0;
        $minute = !empty($record->cohortminutes) ? $record->cohortminutes : 0;
        $am_pm = ($hour >= 12) ? 'PM' : 'AM';
        if ($hour > 12) $hour -= 12;
        if ($hour == 0) $hour = 12;

        $time_red = $hour . ':' . str_pad($minute, 2, '0', STR_PAD_LEFT) . ' ' . $am_pm;
        $M = !empty($record->cohortmonday) ? $record->cohortmonday : 0;
        $T = !empty($record->cohorttuesday) ? $record->cohorttuesday : 0;
        $W = !empty($record->cohortwednesday) ? $record->cohortwednesday : 0;
        $TH = !empty($record->cohortthursday) ? $record->cohortthursday : 0;
        $F = !empty($record->cohortfriday) ? $record->cohortfriday : 0;

        $days_red = [];
        if ($M == 1) $days_red[] = 'M';
        if ($T == 1) $days_red[] = 'T';
        if ($W == 1) $days_red[] = 'W';
        if ($TH == 1) $days_red[] = 'Th';
        if ($F == 1) $days_red[] = 'F';

        $hourTutor = !empty($record->cohorttutorhours) ? (int)$record->cohorttutorhours : 0;
        $minuteTutor = !empty($record->cohorttutorminutes) ? $record->cohorttutorminutes : 0;
        $am_pmTutor = ($hourTutor >= 12) ? 'PM' : 'AM';
        if ($hourTutor > 12) $hourTutor -= 12;
        if ($hourTutor == 0) $hourTutor = 12;

        $time_blue = $hourTutor . ':' . str_pad($minuteTutor, 2, '0', STR_PAD_LEFT) . ' ' . $am_pmTutor;
        $MM = !empty($record->cohorttutormonday) ? $record->cohorttutormonday : 0;
        $TT = !empty($record->cohorttutortuesday) ? $record->cohorttutortuesday : 0;
        $WW = !empty($record->cohorttutorwednesday) ? $record->cohorttutorwednesday : 0;
        $THH = !empty($record->cohorttutorthursday) ? $record->cohorttutorthursday : 0;
        $FF = !empty($record->cohorttutorfriday) ? $record->cohorttutorfriday : 0;

        $days_blue = [];
        if ($MM == 1) $days_blue[] = 'M';
        if ($TT == 1) $days_blue[] = 'T';
        if ($WW == 1) $days_blue[] = 'W';
        if ($THH == 1) $days_blue[] = 'Th';
        if ($FF == 1) $days_blue[] = 'F';

        // Add the cohort's basic details
        $teacher_info['basicDetail'][] = [
            'id' => $cohort_id, // Assign cohort_id to the ID
            'dayAndTime' => [
                'red' => ['time' => $time_red, 'days' => $days_red],
                'blue' => ['time' => $time_blue, 'days' => $days_blue],
            ],
            'attendence' => 8, // Adjust as needed
            'activos' => $cohort_members_count, // Adjust as needed
            'groups' => strtoupper($record->shortname),
            'retention' => "80%" // Adjust as needed
        ];
    }

    // Add topics under the actual course name
    $courses_array = [];
    $sql_courses = "SELECT id, fullname, shortname FROM {course} WHERE id NOT IN (1, 2)";
    $courses = $DB->get_records_sql($sql_courses);
    $iteration = 1; // Initialize the iteration counter

    foreach ($courses as $courseIndex => $course) {
        $sql_topics = "SELECT id, name FROM {course_sections} 
                       WHERE course = :courseid 
                         AND name IS NOT NULL 
                         AND visible = 1";
        $topics = $DB->get_records_sql($sql_topics, ['courseid' => $course->id]);

        $topics_array = [];
        $statuses = ['completed', 'notStarted', '80%']; // Possible statuses
        $status = 'notStarted'; // Default status
        foreach ($cohorts as $cohortIndex => $cohort) {
            
                // Generate a random number of statuses based on the count of topics
                $randomStatuses = [];
                $cohort_id = (int) trim($cohort->id);
                // Check if a record exists in mdl_topics_completion_data
                    
                    foreach ($topics as $topicIndex => $topic) {
                        $existingCompletionData = $DB->get_record('cohorts_topics_completion_data', [
                            'cohortid' => $cohort_id,
                            'courseid' => $course->id,
                            'sectionid' => $topic->id
                        ]);

                        
                        // Determine the status based on the `percentage` and `status` columns
                        if ($existingCompletionData) {
                            if ((int)$existingCompletionData->percentage === "100") {
                                $randomStatus = 'completed'; // Use percentage if it's 100
                            } else {
                                $randomStatus = $existingCompletionData->percentage.'%'; // Use status otherwise
                            }
                        } else {
                            $randomStatus = $status; // Default to $status if no data exists
                        }
                    //$randomStatuses[] = $statuses[array_rand($statuses)]; // Randomly pick a status from the possible statuses
                    $randomStatuses[] = $randomStatus; // Randomly pick a status from the possible statuses
                    }
                
            
                // Add the generated status array for the topic
                $topics_array[] = [
                    'id' => $topicIndex, // Topic index
                    'status' => $randomStatuses // Random status array
                ];
            
            }
             // Use dynamic naming for the level (level01, level02, ...)
    $levelKey = sprintf('level%02d', $iteration); // Format the iteration number to have leading zero, e.g., 'level01'

    // Assign the topics array to the dynamically created level key
    $teacher_info[$levelKey] = $topics_array;

    $iteration++; // Increment the iteration counter for the next level
    }


    // Add the teacher information to the final array only once
    $teachersDetail[] = $teacher_info;

    // Increment color index and reset if it exceeds the number of colors
    $colorIndex = ($colorIndex + 1) % count($colors);
}

// Output the final result as JSON
echo json_encode(['teachers' => $teachersDetail]);
?>