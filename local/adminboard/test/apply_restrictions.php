<?php
// require_once('C:/wamp64/www/moodle/config.php');  // Adjust the path as necessary

ob_start(); // Start output buffering
require_once('../../../config.php'); // Moodle config file for database connection
ob_end_clean(); // Clear any output generated by config.php

require_once($CFG->libdir . '/filelib.php');



function generate_node_uid() {
    return round(microtime(true) * 1000);
}

// Get params
$moduleid   = required_param('moduleid', PARAM_INT);
$cohortid   = required_param('cohortid', PARAM_INT);
$startdate  = required_param('startdate', PARAM_TEXT);
$duedate    = optional_param('duedate', '', PARAM_TEXT);

// Convert to timestamps
$starttimestamp = strtotime($startdate);
$duetimestamp   = $duedate ? strtotime($duedate) : null;

if ($starttimestamp === false) {
    echo json_encode(['status' => 'error', 'message' => 'Invalid start date']);
    exit;
}

// Build condition list
$conditions = [
    ['type' => 'cohort', 'id' => $cohortid],
    ['type' => 'date', 'd' => '>=', 't' => $starttimestamp, 'nodeUID' => generate_node_uid()]
];

if (!empty($duedate) && $duetimestamp !== false) {
    $conditions[] = ['type' => 'date', 'd' => '<', 't' => $duetimestamp, 'nodeUID' => generate_node_uid()];
}

// Inner cohort-date AND block
$innerblock = [
    'op' => '&',
    'c' => $conditions
];

// Fetch module
$cm = $DB->get_record('course_modules', ['id' => $moduleid], 'id, course, availability', MUST_EXIST);

// Prepare final availability
$existing = $cm->availability ? json_decode($cm->availability, true) : null;

if (isset($existing['op']) && $existing['op'] === '&' && is_array($existing['c'])) {
    // Append to existing
    $existing['c'][] = $innerblock;

    if (isset($existing['showc']) && is_array($existing['showc'])) {
        $existing['showc'][] = true;
    } else {
        $existing['showc'] = array_fill(0, count($existing['c']), true);
    }

    $availability = $existing;
} else {
    // Create fresh
    $availability = [
        'op' => '&',
        'c' => [$innerblock],
        'showc' => [true]
    ];
}

// Save
$DB->set_field('course_modules', 'availability', json_encode($availability), ['id' => $moduleid]);


// Rebuild course cache
rebuild_course_cache($cm->course, true);

// Return JSON response and terminate
echo json_encode(['status' => 'success']);
exit;