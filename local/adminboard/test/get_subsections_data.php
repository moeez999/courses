<?php
// get_subsections_data.php
define('AJAX_SCRIPT', true);

ob_start(); // Start output buffering to avoid stray output
require_once('../../../config.php'); // Moodle bootstrap
ob_end_clean(); // Clear any output generated by config.php

global $DB;

// --------- Inputs ---------
$sectionid     = required_param('sectionid', PARAM_INT);
$courseID      = required_param('courseID', PARAM_INT);
$immediateOnly = optional_param('immediateOnly', 0, PARAM_BOOL); // 1 = only direct children, 0 = all descendants

// --------- Validate course format (Multitopic only) ---------
$format = $DB->get_field('course', 'format', ['id' => $courseID]);
if ($format !== 'multitopic') {
    header('Content-Type: application/json');
    echo json_encode(['subsections' => []]);
    exit;
}

// --------- Build cross-DB-safe casts ---------
$castChild  = $DB->sql_cast_char2int('childfo.value');
$castParent = $DB->sql_cast_char2int('parentfo.value');
$castNext   = $DB->sql_cast_char2int('nextfo.value');

// --------- Depth operator ---------
$depthop = $immediateOnly
    ? "= COALESCE($castParent, 0) + 1"
    : "> COALESCE($castParent, 0)";

// --------- Fetch subsections under the given parent section ---------
$sqlSubsections = "
    SELECT
        childcs.*,
        COALESCE($castChild, 0) AS level
    FROM {course_sections} parentcs
    LEFT JOIN {course_format_options} parentfo
           ON parentfo.sectionid = parentcs.id
          AND parentfo.format    = 'multitopic'
          AND parentfo.name      = 'level'
    JOIN {course_sections} childcs
      ON childcs.course = parentcs.course
    LEFT JOIN {course_format_options} childfo
           ON childfo.sectionid = childcs.id
          AND childfo.format    = 'multitopic'
          AND childfo.name      = 'level'
    WHERE parentcs.course = :courseid
      AND parentcs.id     = :parentsectionid
      -- only sections after the parent and before the next top-level (level=0) section
      AND childcs.section > parentcs.section
      AND childcs.section < COALESCE((
            SELECT MIN(nextcs.section)
            FROM {course_sections} nextcs
            LEFT JOIN {course_format_options} nextfo
                   ON nextfo.sectionid = nextcs.id
                  AND nextfo.format    = 'multitopic'
                  AND nextfo.name      = 'level'
            WHERE nextcs.course = parentcs.course
              AND nextcs.section > parentcs.section
              AND COALESCE($castNext, 0) = 0
        ), 1000000000)
      -- depth filter
      AND COALESCE($castChild, 0) $depthop
    ORDER BY childcs.section
";

$params = [
    'courseid'        => $courseID,
    'parentsectionid' => $sectionid,
];

$subsections = array_values($DB->get_records_sql($sqlSubsections, $params));

// --------- For each subsection, fetch modules ---------
foreach ($subsections as &$subsection) {
    $sqlModules = "
        SELECT cm.id,
               CASE
                   WHEN m.name = 'assign' THEN (SELECT name FROM {assign} WHERE id = cm.instance)
                   WHEN m.name = 'quiz'   THEN (SELECT name FROM {quiz}   WHERE id = cm.instance)
                   WHEN m.name = 'forum'  THEN (SELECT name FROM {forum}  WHERE id = cm.instance)
                   WHEN m.name = 'hvp'  THEN (SELECT name FROM {hvp}  WHERE id = cm.instance)
                   -- Add more modules as needed:
                   -- WHEN m.name = 'page'  THEN (SELECT name FROM {page}   WHERE id = cm.instance)
                   -- WHEN m.name = 'url'   THEN (SELECT name FROM {url}    WHERE id = cm.instance)
                   ELSE 'Unknown Activity'
               END AS module_name,
               cm.instance
        FROM {course_modules} cm
        JOIN {modules} m ON cm.module = m.id
        WHERE cm.section = :sectionid
          AND cm.deletioninprogress = 0
    ";
    $modules = $DB->get_records_sql($sqlModules, ['sectionid' => $subsection->id]);

    $subsection->modules = [];
    foreach ($modules as $module) {
        $subsection->modules[] = [
            'id'       => (int)$module->id,
            'name'     => (string)$module->module_name,
            'instance' => (int)$module->instance
        ];
    }
}
unset($subsection); // break reference

// --------- Build and send response ---------
$response = [
    'subsections' => array_map(function($s) {
        return [
            'id'      => (int)$s->id,
            'name'    => (string)($s->name ?? ''),
            'modules' => $s->modules ?? []
        ];
    }, $subsections)
];

header('Content-Type: application/json');
echo json_encode($response);
exit;